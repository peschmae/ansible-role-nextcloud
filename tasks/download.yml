---
- name: Install unzip if needed
  ansible.builtin.package:
    name: unzip
    state: present
  when: nextcloud_archive_format == "zip" or 'zip' in nextcloud_download_url.split('.')[-1:]

- name: Install bunzip2 if needed
  ansible.builtin.package:
    name: bzip2
    state: present
  when: nextcloud_archive_format == "tar.bz2" or 'bz2' in nextcloud_download_url.split('.')[-1:]

- name: Define full download url
  ansible.builtin.set_fact:
    nextcloud_download_url: "{{ (nextcloud_download_url, nextcloud_archive_format) | join('.') }}"
  when:
    # assuming the user set a custom download url
    - "'zip' not in nextcloud_download_url.split('.')[-1:]"
    - "'bz2' not in nextcloud_download_url.split('.')[-1:]"

- name: Create nextcloud_directory with proper permissions
  ansible.builtin.file:
    path: "{{ nextcloud_directory }}"
    mode: u=rwX,g=rX,o-rwx
    recurse: true
    state: directory
    owner: "{{ nextcloud_owner }}"
    group: "{{ nextcloud_group }}"

- block:
    - name: Download & extract Nextcloud to /tmp
      ansible.builtin.unarchive:
        copy: false
        src: "{{ nextcloud_download_url }}"
        dest: /tmp/

    - name: Move extracted files to {{ nextcloud_directory }}
      ansible.builtin.copy:
        src: /tmp/nextcloud/
        dest: "{{ nextcloud_directory }}"
        mode: u=rwX,g=rX,o-rwx
        owner: "{{ nextcloud_owner }}"
        group: "{{ nextcloud_group }}"
        remote_src: true

    - name: Cleanup nextcloud downloads
      ansible.builtin.file:
        path: /tmp/nextcloud
        state: absent
