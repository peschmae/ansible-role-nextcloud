---
# Enable/Download extensions using the occ command
# optimization potential: do this just once, check if there are duplicate keys in nextcloud_apps
- name: "Get list of installed extensions"
  become_user: "{{ nextcloud_owner }}"
  become_flags: "{{ ansible_become_flags | default(omit) }}"
  become: True
  command: "{{ nextcloud_php_executable }} occ app:list --output=json"
  args:
    chdir: "{{ nextcloud_directory }}"
  register: nextcloud_installed_apps

- name: "Install the extension if needed"
  become_user: "{{ nextcloud_owner }}"
  become_flags: "{{ ansible_become_flags | default(omit) }}"
  become: True
  command: "{{ nextcloud_php_executable }} occ app:install {{ item.name }}"
  args:
    chdir: "{{ nextcloud_directory }}"
  when:
    - item.enabled
    - item.name not in nextcloud_installed_apps.stdout

- name: "enable/disable the extension"
  become_user: "{{ nextcloud_owner }}"
  become_flags: "{{ ansible_become_flags | default(omit) }}"
  become: True
  command: "{{ nextcloud_php_executable }} occ app:{{ 'enable' if item.enabled else 'disable' }} {{ item.name }}"
  args:
    chdir: "{{ nextcloud_directory }}"
  when: item.name in nextcloud_installed_apps.stdout

- name: "Configure extension {{ item.name }}"
  become_user: "{{ nextcloud_owner }}"
  become_flags: "{{ ansible_become_flags | default(omit) }}"
  become: True
  command: "{{ nextcloud_php_executable }} occ config:app:set {{ item.name }} {{ cfg_item.key }} --value='{{ cfg_item.value }}'"
  args:
    chdir: "{{ nextcloud_directory }}"
  with_dict: "{{ item.config | default({}) }}"
  loop_control:
        loop_var: cfg_item
  when:
  - item.enabled
  - item.config is defined