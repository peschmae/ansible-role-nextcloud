---
- name: Show installed apps
  ansible.builtin.debug:
    var: (nextcloud_installed_apps.stdout | from_json)
    verbosity: 2

- name: Trying to install app {{ item.name }}
  block:
    - name: Install the app if needed
      become_user: "{{ nextcloud_owner }}"
      become_flags: "{{ ansible_become_flags | default(omit) }}"
      become: true
      ansible.builtin.command: "{{ nextcloud_php_executable }} occ app:install {{ item.name }}"
      register: app_installed
      args:
        chdir: "{{ nextcloud_directory }}"
      when:
        - item.enabled
        - item.name not in (nextcloud_installed_apps.stdout | from_json).enabled
        - item.name not in (nextcloud_installed_apps.stdout | from_json).disabled

    - name: enable the app (if installed and disabled)
      become_user: "{{ nextcloud_owner }}"
      become_flags: "{{ ansible_become_flags | default(omit) }}"
      become: true
      ansible.builtin.command: "{{ nextcloud_php_executable }} occ app:enable {{ item.name }}"
      register: app_enabled
      args:
        chdir: "{{ nextcloud_directory }}"
      when:
        - item.name in (nextcloud_installed_apps.stdout | from_json).disabled
        - item.enabled

    - name: disable the app
      become_user: "{{ nextcloud_owner }}"
      become_flags: "{{ ansible_become_flags | default(omit) }}"
      become: true
      ansible.builtin.command: "{{ nextcloud_php_executable }} occ app:disable {{ item.name }}"
      register: app_disabled
      args:
        chdir: "{{ nextcloud_directory }}"
      when:
        - item.name in (nextcloud_installed_apps.stdout | from_json).enabled
        - not item.enabled

    - name: Configure app {{ item.name }}
      become_user: "{{ nextcloud_owner }}"
      become_flags: "{{ ansible_become_flags | default(omit) }}"
      become: true
      ansible.builtin.command: "{{ nextcloud_php_executable }} occ config:app:set {{ item.name }} {{ cfg_item.key }} --value='{{ cfg_item.value }}'"
      args:
        chdir: "{{ nextcloud_directory }}"
      with_dict: "{{ item.config | default({}) }}"
      loop_control:
        loop_var: cfg_item
      when:
        - item.enabled
        - item.config is defined
      tags:
        - molecule-idempotence-notest
  rescue:
    - name: Show message if application installation failed
      ansible.builtin.debug:
        msg: Installation of app {{ item.name }} failed... See errro above for more information.

# Enable/Download apps using the occ command
# optimization potential: do this just once, check if there are duplicate keys in nextcloud_apps
- name: Get list of installed apps
  become_user: "{{ nextcloud_owner }}"
  become_flags: "{{ ansible_become_flags | default(omit) }}"
  become: true
  ansible.builtin.command: "{{ nextcloud_php_executable }} occ app:list --output=json"
  args:
    chdir: "{{ nextcloud_directory }}"
  register: nextcloud_installed_apps
  changed_when: false
  when: app_installed is changed or app_enabled is changed or app_disabled is changed